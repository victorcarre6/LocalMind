import os
import sqlite3
import logging
from memorization import format_cleaner, compress_text, summarize_batch

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

DB_PATH = "datas/conversations.db"

def main():
    logging.info("Connexion à la base de données SQLite...")
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    # Vérifier si la colonne existe déjà
    cur.execute("PRAGMA table_info(conversations)")
    columns = [col[1] for col in cur.fetchall()]
    if "llm_output_summary" not in columns:
        logging.info("Ajout de la colonne llm_output_summary à la table conversations...")
        cur.execute("ALTER TABLE conversations ADD COLUMN llm_output_summary TEXT")
        conn.commit()
    else:
        logging.info("La colonne llm_output_summary existe déjà.")

    # Récupérer toutes les lignes sans résumé
    logging.info("Récupération des conversations sans résumé...")
    cur.execute("SELECT id, llm_output FROM conversations WHERE llm_output_summary IS NULL OR llm_output_summary = ''")
    rows = cur.fetchall()
    logging.info(f"{len(rows)} conversations à mettre à jour.")

    for convo_id, llm_output in rows:
        try:
            cleaned = format_cleaner(llm_output)
            compressed = compress_text(cleaned)
            summary = summarize_batch([compressed])[0] if compressed else ""
            cur.execute("UPDATE conversations SET llm_output_summary = ? WHERE id = ?", (summary, convo_id))
        except Exception as e:
            logging.error(f"Erreur lors du traitement de la conversation {convo_id}: {e}")
            continue

    conn.commit()
    conn.close()
    logging.info("Migration terminée, toutes les conversations ont un llm_output_summary.")

if __name__ == "__main__":
    main()