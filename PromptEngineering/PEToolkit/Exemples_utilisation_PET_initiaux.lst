# ======================================
# Exemples d'utilisation
# ======================================

if __name__ == "__main__":
    ####
    # Exemples GPT
    ####
    # == Template quelconque ==
    #creative_prompt = text_generation_template(
    #    style="creative",
    #    requirements=["Include a twist ending", "Avoid clichés"],
    #    length_constraint="100 words"
    #)

    #creative_pipeline = pipeline(
    #    capitalize_examples, # utile si on ajoute des exemples après coup
    #    lambda p: add_explanation_requirement(p, "Describe your creative choices:")
    #)

    #final_creative_prompt = creative_pipeline(creative_prompt)
    #print(final_creative_prompt.format())

    
    # == Template N4 ==
    # Prompt de reformulation multi-niveaux
    # Definition du texte d'origine
    #source_text = (
    #"Artificial Intelligence is transforming industries by automating tasks, "
    #"improving decision-making, and enabling new business models."
	#)
    #levels = ["Beginner", "Intermediate", "Expert"]
    #rephrase_prompt = multi_level_rephrase_template(levels)
    
    # On insere le texte d'origine
    #rephrase_prompt.context = f"Original text:\n{source_text}"

    #print("=== Multi-Level Rephrase Prompt ===")
    #print(rephrase_prompt.format())

    # Application optionnelle d'un pipeline
    #enhanced_rephrase_prompt = pipeline(
    #    make_formal,
    #    lambda p: add_explanation_requirement(p, "Explain the differences between each level:")
    #)(rephrase_prompt)

    #print("\n=== Enhanced Multi-Level Rephrase Prompt ===")
    #print(enhanced_rephrase_prompt.format())

    # Validation
    #print("\n=== Validation ===")
    #print(f"Original prompt valid: {rephrase_prompt.validate()}")
    #print(f"Enhanced prompt valid: {enhanced_rephrase_prompt.validate()}")

    ####
    # Exemples Anthro
    ####
    # Serie I
    # Analyse de problème complexe
    #problem_analysis = structured_analysis_template(
    #    subject="Remote work implementation",
    #    framework="SWOT Analysis",
    #    dimensions=["Strengths", "Weaknesses", "Opportunities", "Threats"]
    #)
    
    # Application de transformations multiples
    #enhanced_analysis = pipeline(
    #    add_confidence_scoring,
    #    lambda p: add_alternative_perspectives(p, 3),
    #    make_formal
    #)(problem_analysis)
    
    #print("=== Enhanced Problem Analysis ===")
    #print(enhanced_analysis.format())
    
    # Template créatif sous contraintes
    #story_prompt = creative_constraints_template(
    #    creative_type="short story",
    #    mandatory_elements=["a broken clock", "a mysterious letter", "rain"],
    #    forbidden_elements=["romance", "violence", "technology"]
    #)
    
    #creative_pipeline = pipeline(
    #    lambda p: add_explanation_requirement(p, "Explain your creative choices:"),
    #    add_confidence_scoring
    #)
    
    #final_story_prompt = creative_pipeline(story_prompt)
    #print("\n=== Creative Story Prompt ===")
    #print(final_story_prompt.format())

    # Serie II   
    print("="*60)
    print("PROMPT ENGINEERING TOOLKIT - EXEMPLES D'UTILISATION")
    print("="*60)
    
    # =============================================
    # EXEMPLE 1: Analyse de problème d'entreprise
    # =============================================
    print("\n1. ANALYSE STRATÉGIQUE D'ENTREPRISE")
    print("-" * 40)
    
    # Création du prompt de base
    business_analysis = structured_analysis_template(
        subject="L'adoption de l'Intelligence Artificielle dans une PME",
        framework="Analyse SWOT",
        dimensions=["Forces", "Faiblesses", "Opportunités", "Menaces"]
    )
    
    # Application d'un pipeline de transformations
    enhanced_business = pipeline(
        make_formal,
        add_confidence_scoring,
        lambda p: add_alternative_perspectives(p, 2),
        lambda p: add_source_requirements(p, ["études de cas", "données statistiques", "experts du domaine"])
    )(business_analysis)
    
    print(enhanced_business.format())
    print(f"Prompt valide: {enhanced_business.validate()}")
    
    # =============================================
    # EXEMPLE 2: Résolution de problème technique
    # =============================================
    print("\n\n2. RÉSOLUTION DE PROBLÈME TECHNIQUE")
    print("-" * 40)
    
    tech_problem = chain_of_thought_template(
        problem_type="optimisation de base de données",
        context="Une application web connaît des ralentissements lors des requêtes sur une table de 10 millions d'enregistrements."
    )
    
    # Ajout d'exemples spécifiques
    tech_problem.add_example("Problème: Requête lente -> Solution: Index sur colonnes fréquemment utilisées")
    tech_problem.add_example("Problème: Jointures complexes -> Solution: Dénormalisation partielle")
    
    # Pipeline technique
    tech_enhanced = pipeline(
        capitalize_examples,
        lambda p: add_explanation_requirement(p, "Justifiez chaque étape technique:"),
        add_confidence_scoring
    )(tech_problem)
    
    print(tech_enhanced.format())
    
    # =============================================
    # EXEMPLE 3: Création de contenu créatif
    # =============================================
    print("\n\n3. CRÉATION DE CONTENU CRÉATIF")
    print("-" * 40)
    
    creative_story = creative_constraints_template(
        creative_type="nouvelle courte",
        mandatory_elements=["une bibliothèque abandonnée", "un chat noir", "une carte mystérieuse"],
        forbidden_elements=["violence", "magie", "voyage dans le temps"]
    )
    
    # Pipeline créatif
    creative_enhanced = pipeline(
        lambda p: add_explanation_requirement(p, "Expliquez vos choix narratifs:"),
        lambda p: add_alternative_perspectives(p, 1)
    )(creative_story)
    
    print(creative_enhanced.format())
    
    # =============================================
    # EXEMPLE 4: Débat et argumentation
    # =============================================
    print("\n\n4. DÉBAT STRUCTURÉ")
    print("-" * 40)
    
    debate_prompt = debate_template(
        topic="L'intelligence artificielle devrait-elle remplacer les enseignants?",
        position="contre",
        opposing_arguments=[
            "L'IA peut personnaliser l'apprentissage",
            "Disponibilité 24h/24",
            "Coût réduit pour l'éducation"
        ]
    )
    
    # Transformation socratique
    socratic_debate = pipeline(
        make_socratic,
        add_confidence_scoring,
        lambda p: add_source_requirements(p, ["recherches pédagogiques", "études psychologiques"])
    )(debate_prompt)
    
    print(socratic_debate.format())
    
    # =============================================
    # EXEMPLE 5: Formation par l'exemple (Few-shot)
    # =============================================
    print("\n\n5. APPRENTISSAGE FEW-SHOT")
    print("-" * 40)
    
    few_shot_examples = [
        ("Analyser les ventes Q1", "Revenus: +15% vs Q4, Marges: -2%, Recommandation: Optimiser coûts"),
        ("Évaluer satisfaction client", "Score NPS: 7.2/10, Problèmes: Support lent, Action: Formation équipe"),
        ("Review performance marketing", "CTR: 2.3%, Conversion: 4.1%, Budget: Réallouer vers mobile")
    ]
    
    few_shot_prompt = few_shot_learning_template(
        task="analyse de métriques business",
        examples=few_shot_examples,
        pattern_description="Identifier 2-3 métriques clés, diagnostiquer et proposer une action"
    )
    
    # Ajout de contexte spécifique
    few_shot_prompt.context += "\nNouvelle tâche: Analyser les performances du service client"
    
    few_shot_enhanced = pipeline(
        make_formal,
        add_confidence_scoring
    )(few_shot_prompt)
    
    print(few_shot_enhanced.format())
    
    # =============================================
    # EXEMPLE 6: Jeu de rôle professionnel
    # =============================================
    print("\n\n6. JEU DE RÔLE PROFESSIONNEL")
    print("-" * 40)
    
    role_play = role_play_template(
        role="consultant en transformation digitale",
        scenario="Une entreprise familiale de 50 ans résiste aux changements technologiques",
        objectives=["identifier les blocages", "proposer une approche progressive", "rassurer sur les risques"]
    )
    
    role_enhanced = pipeline(
        lambda p: add_alternative_perspectives(p, 2),
        lambda p: add_explanation_requirement(p, "Justifiez votre approche consultante:")
    )(role_play)
    
    print(role_enhanced.format())
    
    # =============================================
    # EXEMPLE 7: Planification de scénarios
    # =============================================
    print("\n\n7. PLANIFICATION DE SCÉNARIOS")
    print("-" * 40)
    
    scenario_planning = scenario_planning_template(
        situation="Lancement d'un nouveau produit SaaS",
        variables=["adoption marché", "concurrence", "ressources techniques", "réglementation"],
        time_horizon="18 mois"
    )
    
    scenario_enhanced = pipeline(
        add_confidence_scoring,
        lambda p: add_source_requirements(p, ["données marché", "benchmarks secteur"])
    )(scenario_planning)
    
    print(scenario_enhanced.format())
    
    # =============================================
    # EXEMPLE 8: Analyse d'erreurs
    # =============================================
    print("\n\n8. ANALYSE D'ERREURS")
    print("-" * 40)
    
    error_analysis = error_analysis_template(
        domain="code Python",
        error_types=["syntaxe", "logique", "performance", "sécurité"]
    )
    
    # Ajout du code à analyser
    error_analysis.context = """
Code à analyser:
def process_users(users):
    results = []
    for user in users:
        if user.age > 18:
            result = user.name + " est majeur"
            results.append(result)
        password = "admin123"  # Même mot de passe pour tous
        user.login(password)
    return results
"""
    
    error_enhanced = pipeline(
        make_formal,
        lambda p: add_explanation_requirement(p, "Expliquez l'impact de chaque erreur:")
    )(error_analysis)
    
    print(error_enhanced.format())
    
    # =============================================
    # EXEMPLE 9: Comparaison de solutions
    # =============================================
    print("\n\n9. COMPARAISON DE SOLUTIONS")
    print("-" * 40)
    
    comparison = comparison_template(
        items=["React", "Vue.js", "Angular"],
        aspects=["courbe d'apprentissage", "écosystème", "performance", "taille de la communauté"]
    )
    
    comparison_enhanced = pipeline(
        add_confidence_scoring,
        lambda p: add_source_requirements(p, ["benchmarks officiels", "études développeurs"]),
        lambda p: add_alternative_perspectives(p, 1)
    )(comparison)
    
    print(comparison_enhanced.format())
    
    # =============================================
    # EXEMPLE 10: Génération de variations
    # =============================================
    print("\n\n10. GÉNÉRATION DE VARIATIONS")
    print("-" * 40)
    
    # Prompt de base simple
    base_prompt = Prompt(
        instruction="Rédigez un email professionnel pour reporter une réunion",
        context="Réunion prévue demain, conflit d'agenda imprévu"
    )
    
    # Création de variations avec différentes transformations
    variations = generate_variations(
        base_prompt,
        [
            make_formal,
            lambda p: pipeline(make_formal, add_confidence_scoring)(p),
            lambda p: pipeline(
                lambda p: add_explanation_requirement(p, "Justifiez le ton choisi:"),
                lambda p: add_alternative_perspectives(p, 1)
            )(p),
            make_socratic
        ]
    )
    
    for i, variant in enumerate(variations, 1):
        print(f"\n--- Variation {i} ---")
        print(variant.format())
        print(f"Valide: {variant.validate()}")
    
    # =============================================
    # EXEMPLE 11: Sauvegarde et export
    # =============================================
    print("\n\n11. SAUVEGARDE ET EXPORT")
    print("-" * 40)
    
    # Sauvegarde d'un prompt complexe en JSON
    export_data = {
        "business_analysis": enhanced_business.to_dict(),
        "creative_story": creative_enhanced.to_dict(),
        "scenario_planning": scenario_enhanced.to_dict()
    }
    
    json_export = json.dumps(export_data, indent=2, ensure_ascii=False)
    print("Export JSON (extrait):")
    print(json_export[:500] + "...")
    
    # Reconstruction d'un prompt depuis JSON
    reconstructed = Prompt.from_dict(export_data["business_analysis"])
    print(f"\nPrompt reconstruit valide: {reconstructed.validate()}")
    
    print("\n" + "="*60)
    print("FIN DES EXEMPLES - TOOLKIT PET DEMONSTRÉ")
    print("="*60)   
